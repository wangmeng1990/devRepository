<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ark.hngxt.product.mapper.RecommendOrganizationMapper">
  <resultMap id="BaseResultMap" type="com.ark.hngxt.product.domain.RecommendOrganization">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="organization" jdbcType="VARCHAR" property="organization" />
    <result column="organization_id" jdbcType="BIGINT" property="organizationId" />
    <result column="parent_organization" jdbcType="VARCHAR" property="parentOrganization" />
    <result column="parent_organization_id" jdbcType="BIGINT" property="parentOrganizationId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="logo" jdbcType="VARCHAR" property="logo" />
    <result column="loan_count" jdbcType="INTEGER" property="loanCount" />
    <result column="loan_amount" jdbcType="DECIMAL" property="loanAmount" />
    <result column="butt_count" jdbcType="INTEGER" property="buttCount" />
    <result column="product_count" jdbcType="INTEGER" property="productCount" />
    <result column="service_count" jdbcType="INTEGER" property="serviceCount" />
    <result column="service_score" jdbcType="VARCHAR" property="serviceScore" />
    <result column="valuation_count" jdbcType="INTEGER" property="valuationCount" />
    <result column="average_acceptance_time" jdbcType="VARCHAR" property="averageAcceptanceTime" />
    <result column="interest_rate_rang" jdbcType="VARCHAR" property="interestRateRang" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, organization, organization_id, parent_organization, parent_organization_id, name, 
    description, type, logo, loan_count, loan_amount, butt_count, product_count, service_count, 
    service_score, valuation_count, average_acceptance_time, interest_rate_rang, status, 
    create_by, create_date, update_by, update_date
  </sql>
  <select id="selectByExample" parameterType="com.ark.hngxt.product.domain.RecommendOrganizationCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from recommend_organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from recommend_organization
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from recommend_organization
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ark.hngxt.product.domain.RecommendOrganizationCriteria">
    delete from recommend_organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ark.hngxt.product.domain.RecommendOrganization">
    insert into recommend_organization (id, organization, organization_id, 
      parent_organization, parent_organization_id, 
      name, description, type, 
      logo, loan_count, loan_amount, 
      butt_count, product_count, service_count, 
      service_score, valuation_count, average_acceptance_time, 
      interest_rate_rang, status, create_by, 
      create_date, update_by, update_date
      )
    values (#{id,jdbcType=BIGINT}, #{organization,jdbcType=VARCHAR}, #{organizationId,jdbcType=BIGINT}, 
      #{parentOrganization,jdbcType=VARCHAR}, #{parentOrganizationId,jdbcType=BIGINT}, 
      #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{logo,jdbcType=VARCHAR}, #{loanCount,jdbcType=INTEGER}, #{loanAmount,jdbcType=DECIMAL}, 
      #{buttCount,jdbcType=INTEGER}, #{productCount,jdbcType=INTEGER}, #{serviceCount,jdbcType=INTEGER}, 
      #{serviceScore,jdbcType=VARCHAR}, #{valuationCount,jdbcType=INTEGER}, #{averageAcceptanceTime,jdbcType=VARCHAR}, 
      #{interestRateRang,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{createBy,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ark.hngxt.product.domain.RecommendOrganization">
    insert into recommend_organization
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="organization != null">
        organization,
      </if>
      <if test="organizationId != null">
        organization_id,
      </if>
      <if test="parentOrganization != null">
        parent_organization,
      </if>
      <if test="parentOrganizationId != null">
        parent_organization_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="logo != null">
        logo,
      </if>
      <if test="loanCount != null">
        loan_count,
      </if>
      <if test="loanAmount != null">
        loan_amount,
      </if>
      <if test="buttCount != null">
        butt_count,
      </if>
      <if test="productCount != null">
        product_count,
      </if>
      <if test="serviceCount != null">
        service_count,
      </if>
      <if test="serviceScore != null">
        service_score,
      </if>
      <if test="valuationCount != null">
        valuation_count,
      </if>
      <if test="averageAcceptanceTime != null">
        average_acceptance_time,
      </if>
      <if test="interestRateRang != null">
        interest_rate_rang,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="organization != null">
        #{organization,jdbcType=VARCHAR},
      </if>
      <if test="organizationId != null">
        #{organizationId,jdbcType=BIGINT},
      </if>
      <if test="parentOrganization != null">
        #{parentOrganization,jdbcType=VARCHAR},
      </if>
      <if test="parentOrganizationId != null">
        #{parentOrganizationId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="logo != null">
        #{logo,jdbcType=VARCHAR},
      </if>
      <if test="loanCount != null">
        #{loanCount,jdbcType=INTEGER},
      </if>
      <if test="loanAmount != null">
        #{loanAmount,jdbcType=DECIMAL},
      </if>
      <if test="buttCount != null">
        #{buttCount,jdbcType=INTEGER},
      </if>
      <if test="productCount != null">
        #{productCount,jdbcType=INTEGER},
      </if>
      <if test="serviceCount != null">
        #{serviceCount,jdbcType=INTEGER},
      </if>
      <if test="serviceScore != null">
        #{serviceScore,jdbcType=VARCHAR},
      </if>
      <if test="valuationCount != null">
        #{valuationCount,jdbcType=INTEGER},
      </if>
      <if test="averageAcceptanceTime != null">
        #{averageAcceptanceTime,jdbcType=VARCHAR},
      </if>
      <if test="interestRateRang != null">
        #{interestRateRang,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ark.hngxt.product.domain.RecommendOrganizationCriteria" resultType="java.lang.Long">
    select count(*) from recommend_organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update recommend_organization
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.organization != null">
        organization = #{record.organization,jdbcType=VARCHAR},
      </if>
      <if test="record.organizationId != null">
        organization_id = #{record.organizationId,jdbcType=BIGINT},
      </if>
      <if test="record.parentOrganization != null">
        parent_organization = #{record.parentOrganization,jdbcType=VARCHAR},
      </if>
      <if test="record.parentOrganizationId != null">
        parent_organization_id = #{record.parentOrganizationId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.logo != null">
        logo = #{record.logo,jdbcType=VARCHAR},
      </if>
      <if test="record.loanCount != null">
        loan_count = #{record.loanCount,jdbcType=INTEGER},
      </if>
      <if test="record.loanAmount != null">
        loan_amount = #{record.loanAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.buttCount != null">
        butt_count = #{record.buttCount,jdbcType=INTEGER},
      </if>
      <if test="record.productCount != null">
        product_count = #{record.productCount,jdbcType=INTEGER},
      </if>
      <if test="record.serviceCount != null">
        service_count = #{record.serviceCount,jdbcType=INTEGER},
      </if>
      <if test="record.serviceScore != null">
        service_score = #{record.serviceScore,jdbcType=VARCHAR},
      </if>
      <if test="record.valuationCount != null">
        valuation_count = #{record.valuationCount,jdbcType=INTEGER},
      </if>
      <if test="record.averageAcceptanceTime != null">
        average_acceptance_time = #{record.averageAcceptanceTime,jdbcType=VARCHAR},
      </if>
      <if test="record.interestRateRang != null">
        interest_rate_rang = #{record.interestRateRang,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update recommend_organization
    set id = #{record.id,jdbcType=BIGINT},
      organization = #{record.organization,jdbcType=VARCHAR},
      organization_id = #{record.organizationId,jdbcType=BIGINT},
      parent_organization = #{record.parentOrganization,jdbcType=VARCHAR},
      parent_organization_id = #{record.parentOrganizationId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      logo = #{record.logo,jdbcType=VARCHAR},
      loan_count = #{record.loanCount,jdbcType=INTEGER},
      loan_amount = #{record.loanAmount,jdbcType=DECIMAL},
      butt_count = #{record.buttCount,jdbcType=INTEGER},
      product_count = #{record.productCount,jdbcType=INTEGER},
      service_count = #{record.serviceCount,jdbcType=INTEGER},
      service_score = #{record.serviceScore,jdbcType=VARCHAR},
      valuation_count = #{record.valuationCount,jdbcType=INTEGER},
      average_acceptance_time = #{record.averageAcceptanceTime,jdbcType=VARCHAR},
      interest_rate_rang = #{record.interestRateRang,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ark.hngxt.product.domain.RecommendOrganization">
    update recommend_organization
    <set>
      <if test="organization != null">
        organization = #{organization,jdbcType=VARCHAR},
      </if>
      <if test="organizationId != null">
        organization_id = #{organizationId,jdbcType=BIGINT},
      </if>
      <if test="parentOrganization != null">
        parent_organization = #{parentOrganization,jdbcType=VARCHAR},
      </if>
      <if test="parentOrganizationId != null">
        parent_organization_id = #{parentOrganizationId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="logo != null">
        logo = #{logo,jdbcType=VARCHAR},
      </if>
      <if test="loanCount != null">
        loan_count = #{loanCount,jdbcType=INTEGER},
      </if>
      <if test="loanAmount != null">
        loan_amount = #{loanAmount,jdbcType=DECIMAL},
      </if>
      <if test="buttCount != null">
        butt_count = #{buttCount,jdbcType=INTEGER},
      </if>
      <if test="productCount != null">
        product_count = #{productCount,jdbcType=INTEGER},
      </if>
      <if test="serviceCount != null">
        service_count = #{serviceCount,jdbcType=INTEGER},
      </if>
      <if test="serviceScore != null">
        service_score = #{serviceScore,jdbcType=VARCHAR},
      </if>
      <if test="valuationCount != null">
        valuation_count = #{valuationCount,jdbcType=INTEGER},
      </if>
      <if test="averageAcceptanceTime != null">
        average_acceptance_time = #{averageAcceptanceTime,jdbcType=VARCHAR},
      </if>
      <if test="interestRateRang != null">
        interest_rate_rang = #{interestRateRang,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ark.hngxt.product.domain.RecommendOrganization">
    update recommend_organization
    set organization = #{organization,jdbcType=VARCHAR},
      organization_id = #{organizationId,jdbcType=BIGINT},
      parent_organization = #{parentOrganization,jdbcType=VARCHAR},
      parent_organization_id = #{parentOrganizationId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      logo = #{logo,jdbcType=VARCHAR},
      loan_count = #{loanCount,jdbcType=INTEGER},
      loan_amount = #{loanAmount,jdbcType=DECIMAL},
      butt_count = #{buttCount,jdbcType=INTEGER},
      product_count = #{productCount,jdbcType=INTEGER},
      service_count = #{serviceCount,jdbcType=INTEGER},
      service_score = #{serviceScore,jdbcType=VARCHAR},
      valuation_count = #{valuationCount,jdbcType=INTEGER},
      average_acceptance_time = #{averageAcceptanceTime,jdbcType=VARCHAR},
      interest_rate_rang = #{interestRateRang,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <!-- 机构推荐列表:首页机构列表按服务次数降序 -->
  <select id="queryOrganizationRecommendList_1" parameterType="map" resultType="com.ark.hngxt.product.model.RecommendOrganizationVO">
    <if test="orgList != null and orgList.size() > 0">
    select t.*,t1.productCount,CONCAT(t1.interestRateStart,'%-',t1.interestRateEnd,'%') as interestRateRang
    <if test="serviceList != null and serviceList.size() > 0">
    ,t2.serviceCount,t2.serviceScore,t2.averageAcceptanceTime
    </if>
     from (
		<foreach collection="orgList" item="item" index="index" open="" separator=" UNION ALL " close="">
		SELECT 
		#{item.institutionName} as name,
		#{item.institutionId} as organizationId,
		#{item.logoFile} as organization,
		#{item.createTime} as createDate
		FROM DUAL 
	    </foreach>
	    ) t left join (SELECT t.organizationId,SUM(productCount) AS productCount,MIN(interestRateStart) AS interestRateStart ,MAX(interestRateEnd) AS interestRateEnd  FROM (SELECT t.`parent_organization_id` AS organizationId,COUNT(1) AS productCount,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `credit_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`
		UNION ALL 
		SELECT t.`parent_organization_id` AS organizationId,COUNT(1) AS productCount,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `finance_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`) t  GROUP BY t.organizationId) t1 on t.organizationId=t1.organizationId
		<if test="serviceList != null and serviceList.size() > 0">
		left join (
		<foreach collection="serviceList" item="item" index="index" open="" separator=" UNION ALL " close="">
		SELECT 
		#{item.instId} as organizationId,
		#{item.fwCount} as serviceCount,
		#{item.acceptanceDayAvg} as averageAcceptanceTime,
		#{item.integratedServices} as serviceScore
		FROM DUAL 
	    </foreach>
		) t2 on t.organizationId=t2.organizationId
		</if>
		<if test="serviceList != null and serviceList.size() > 0">
		 order by  t2.serviceCount  desc
		</if>
	</if>
  </select>
  
  <!-- 机构推荐列表-更多排序-->
  <select id="queryOrganizationRecommendList" parameterType="map" resultType="com.ark.hngxt.product.model.RecommendOrganizationVO">
    <if test="orgList != null and orgList.size() > 0">
    select t.*,t1.productCount,CONCAT(t1.interestRateStart,'%-',t1.interestRateEnd,'%') as interestRateRang
    <if test="serviceList != null and serviceList.size() > 0">
    ,t2.averageAcceptanceTime,t2.buttCount,t2.valuationCount,t2.serviceCount,t2.serviceScore,t2.integratedServicesStr,t2.loanCount,t2.loanAmount
    </if>
     from (
		<foreach collection="orgList" item="item" index="index" open="" separator=" UNION ALL " close="">
		SELECT 
		#{item.institutionName} as name,
		#{item.institutionId} as organizationId,
		#{item.logoFile} as organization,
		#{item.circleLogoFile} as logo,
		#{item.category} as type,
		#{item.serviceFields} as description,
		#{item.createTime} as createDate,
		#{item.connects} as connects,
		#{item.telephone} as telephone,
		#{item.city} as city
		FROM DUAL 
	    </foreach>
	    ) t left join (SELECT t.organizationId,SUM(productCount) AS productCount,MIN(interestRateStart) AS interestRateStart ,MAX(interestRateEnd) AS interestRateEnd  FROM (SELECT t.`parent_organization_id` AS organizationId,COUNT(1) AS productCount,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `credit_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`
		UNION ALL 
		SELECT t.`parent_organization_id` AS organizationId,COUNT(1) AS productCount,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `finance_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`) t  GROUP BY t.organizationId) t1 on t.organizationId=t1.organizationId
				
				<if test="serviceList != null and serviceList.size() > 0">
				left join (
				<foreach collection="serviceList" item="item" index="index" open="" separator=" UNION ALL " close="">
				SELECT 
				#{item.instId} as organizationId,
				#{item.acceptanceDayAvg} as averageAcceptanceTime,
				#{item.entpCount} as buttCount,
				#{item.evalCount} as valuationCount,
				#{item.fwCount} as serviceCount,
				#{item.integratedServices} as serviceScore,
				#{item.integratedServicesStr} as integratedServicesStr,
				#{item.ryCount} as loanCount,
				#{item.ryMoney} as loanAmount
				FROM DUAL 
			    </foreach>
				) t2 on t.organizationId=t2.organizationId
				</if>
				
				<if test="serviceList == null or serviceList.size() == 0">
						left join (select null organizationId,null loanAmount, null loanCount , null serviceScore from dual ) t2 on t.organizationId=t2.organizationId
				</if>
		where 1=1
		<if test="orgName != null and ''!=orgName">
   	     AND t.`name` LIKE CONCAT('%',#{orgName},'%')
        </if>
        <if test="orgType != null and ''!=orgType">
   	     AND t.`type` =#{orgType}
        </if>
		<choose>
		    <!-- 综合服务得分正序、倒序排序； -->
			<when test="sortField != null and 3==sortField">
						 order by  t2.serviceScore  
							 <choose>
							<when test="sort != null and 1==sort">
							asc
							</when>
							<otherwise>
							desc
							</otherwise>
							 </choose>
							 
							 ,t.createDate desc
			</when>
			<!-- 默认排序 按照放款金额降序排序，若放款金额相同，则按照贷款笔数降序排；若贷款笔数相同，则按照金融机构入驻时间倒序排序；-->
			<otherwise>
						  order by	t2.loanAmount desc,t2.loanCount desc,t.createDate desc
			</otherwise>
       </choose>
	</if>
  </select>
  
  
  <!-- 机构推荐列表-热门机构-->
  <select id="queryHotOrganizationRecommendList" parameterType="map" resultType="com.ark.hngxt.product.model.RecommendOrganizationVO">
    <if test="orgList != null and orgList.size() > 0">
    select t.*,t1.productCount,CONCAT(t1.interestRateStart,'%-',t1.interestRateEnd,'%') as interestRateRang
    <if test="serviceList != null and serviceList.size() > 0">
    ,t2.averageAcceptanceTime,t2.buttCount,t2.valuationCount,t2.serviceCount,t2.serviceScore,t2.integratedServicesStr,t2.loanCount,t2.loanAmount
    </if>
     from (
		<foreach collection="orgList" item="item" index="index" open="" separator=" UNION ALL " close="">
		SELECT 
		#{item.institutionName} as name,
		#{item.institutionId} as organizationId,
		#{item.logoFile} as organization,
		#{item.circleLogoFile} as logo,
		#{item.category} as type,
		#{item.serviceFields} as description,
		#{item.createTime} as createDate,
		#{item.connects} as connects,
		#{item.telephone} as telephone,
		#{item.city} as city,
		#{item.hotRecommend} as hotRecommend,
		#{item.hotRecommendSort} as hotRecommendSort
		FROM DUAL 
	    </foreach>
	    ) t left join (SELECT t.organizationId,SUM(productCount) AS productCount,MIN(interestRateStart) AS interestRateStart ,MAX(interestRateEnd) AS interestRateEnd  FROM (SELECT t.`parent_organization_id` AS organizationId,COUNT(1) AS productCount,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `credit_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`
		UNION ALL 
		SELECT t.`parent_organization_id` AS organizationId,COUNT(1) AS productCount,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `finance_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`) t  GROUP BY t.organizationId) t1 on t.organizationId=t1.organizationId
				
				<if test="serviceList != null and serviceList.size() > 0">
				left join (
				<foreach collection="serviceList" item="item" index="index" open="" separator=" UNION ALL " close="">
				SELECT 
				#{item.instId} as organizationId,
				#{item.acceptanceDayAvg} as averageAcceptanceTime,
				#{item.entpCount} as buttCount,
				#{item.evalCount} as valuationCount,
				#{item.fwCount} as serviceCount,
				#{item.integratedServices} as serviceScore,
				#{item.integratedServicesStr} as integratedServicesStr,
				#{item.ryCount} as loanCount,
				#{item.ryMoney} as loanAmount
				FROM DUAL 
			    </foreach>
				) t2 on t.organizationId=t2.organizationId
				</if>
				
				<if test="serviceList == null or serviceList.size() == 0">
						left join (select null organizationId,null loanAmount, null loanCount , null serviceScore from dual ) t2 on t.organizationId=t2.organizationId
				</if>
		order by t.hotRecommendSort asc
	</if>
  </select>
  
  <select id="orgProductInterestRateRang" parameterType="map" resultType="java.lang.String">
   SELECT CONCAT(t.interestRateStart,'%-',t.interestRateEnd,'%') AS interestRateRang FROM (
   SELECT t.organizationId,MIN(interestRateStart) AS interestRateStart ,MAX(interestRateEnd) AS interestRateEnd  FROM (SELECT t.`parent_organization_id` AS organizationId,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `credit_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`
		UNION ALL 
		SELECT t.`parent_organization_id` AS organizationId,MIN(t.`interest_rate_start`) AS interestRateStart,MAX(t.`interest_rate_end`) AS interestRateEnd FROM `finance_product` t 
		WHERE t.`status`=1 GROUP BY t.`parent_organization_id`) t  GROUP BY t.organizationId
  ) t WHERE t.organizationId=#{orgId}
  </select>
  
  <!-- 查询机构最低利率 -->
  <select id="getOrgProductInfo" parameterType="java.lang.Long" resultType="map">
   SELECT 
  t.organizationId,
  t.interestRateStart,
  t.interestRateEnd,
  t.pcount
FROM
  (SELECT 
    t.organizationId,
    MIN(interestRateStart) AS interestRateStart,
    MAX(interestRateEnd) AS interestRateEnd,
    SUM(pcount) AS pcount
  FROM
    (SELECT 
      t.`parent_organization_id` AS organizationId,
      MIN(t.`interest_rate_start`) AS interestRateStart,
      MAX(t.`interest_rate_end`) AS interestRateEnd,
      COUNT(1) AS pcount
    FROM
      `credit_product` t 
    WHERE t.`status` = 1 
    GROUP BY t.`parent_organization_id` 
    UNION
    ALL 
    SELECT 
      t.`parent_organization_id` AS organizationId,
      MIN(t.`interest_rate_start`) AS interestRateStart,
      MAX(t.`interest_rate_end`) AS interestRateEnd ,
      COUNT(1) AS pcount
    FROM
      `finance_product` t 
    WHERE t.`status` = 1 
    GROUP BY t.`parent_organization_id`) t 
  GROUP BY t.organizationId) t 
    WHERE t.organizationId =  #{id}
  </select>
  
</mapper>